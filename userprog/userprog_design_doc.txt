                     +--------------------------+
                     |         EE 461S          |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jose Carlos Martinez Garcia-Vaso <carlosgvaso@utexas.edu>
Utkarsh Vardan <uvardan@utexas.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct cmd_ {
  char *cmd_str;
  char **argv;
  int argc;
} cmd_t;

It holds the parsed user command, and a way to easily access each command
argument to load it into the stack.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We parse the string containing the arguments inside the `process_execute()`
function in `process.c`, and we save the results into the `cmd_` struct defined
in `process.h`. The arguments are parsed by using `strtok_r()` to tokenize the
original command string in place (`cmd_str`), saving the pointers pointing to
the initial character of each token (argument) in an array (`argv`), and
keeping a count of the total number tokens (arguments) found (`argc`). All this
is organized in the `cmd_` struct for easy passing to the functions that
require it. By tokenizing, we mean to break the command string into white-space
separated tokens or words, which are considered as the command arguments.

By saving the parsed command in a struct, we can pass the command struct as the
argument to `start_process()`. Then, `start_process()` saves the struct to a
local variable of its thread, and it passes a pointer to the struct to
`load()`. The `load()` function uses the first argument to load the program
binary, and it passes the pointer to the command struct to `setup_stack()`,
which loads the arguments into the stack as per the requirements.

Loading the aruguments into the stack is done by writing from the PHYS_BASE
down the argument strings in reverse order (last argument gets written first).
For this, we point the ESP to the PHYS_BASE, and we decrement it by the length
of the argument to be written to the stack, which we can get using
`strlen(cmd->argv[i])`. Then, we write the argument to the stack location
pointed by ESP, and repeat it for the rest of the arguments in a loop form the
last argument `cmd->argv[cmd->argc-1]` to the first `cmd->argv[0]`.

Then, we add any necessary padding to align the `argv` array in the stack as
calculated by the following formula: `(aling - (offset mod aling)) mod aling`.
The modulus operator is represented as `mod`, `aling` is the 4-byte alingment
required by the x86 architecture, and `offset` is the total length of the
command string in the stack including all the `\0` characters. We also
decrement the ESP by any padding characters added to the stack.

Then, we set a NULL pointer to represent the end of the `argv` array as
required by the x86 architecture, and we load pointers to the beginning
character of each argument previously loaded to the stack in reverse order
(last argument first). Also, we add a pointer (`argv`) to the first entry of
the array (`argv[0]`). Before we add each `argv` pointer entry, we decrement
the ESP in word increments each time a pointer is going to be added to the
stack (including the NULL pointer).

Finally, we add `argc` and the return address as separate words to the stack,
and we decrement the ESP by 2 words to point to the return address. As
previously, the ESP is decremented before we add the items to the stack in
practice, so we can use it to know where in the stack we should begin to write.

TODO: How do you avoid overflowing the stack page?


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

This is because the kernel is a multithreaded program, and multiple threads can
call the `strtok_r()` function simultaneously. Therefore, that function must be
reentrant, in order to be thread-safe. In the kernel, `strtok()` cannot safely
store its current position in the string in a global or static variable, as
this variable might get overwritten by a call to `strtok()` by another thread.
This is why `strtok_r()` requires an extra argument to save its current
position in the string in a local variable of the thread, which makes
`strtoc_r()` reentrant and thread-safe.


                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want -- these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
